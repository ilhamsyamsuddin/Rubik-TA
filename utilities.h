#include<stdio.h>
#include<iostream>
#include<string.h>
#include<algorithm>
#include "kubus.h"

using namespace std;

string hex2bin(string s)
{
	// hexadecimal to binary conversion
	unordered_map<char,string>mp;
	mp['0'] = "0000";
	mp['1'] = "0001";
	mp['2'] = "0010";
	mp['3'] = "0011";
	mp['4'] = "0100";
	mp['5'] = "0101";
	mp['6'] = "0110";
	mp['7'] = "0111";
	mp['8'] = "1000";
	mp['9'] = "1001";
	mp['A'] = "1010";
	mp['B'] = "1011";
	mp['C'] = "1100";
	mp['D'] = "1101";
	mp['E'] = "1110";
	mp['F'] = "1111";
	string bin = "";
	for (int i = 0; i < s.size(); i++) {
		bin += mp[s[i]];
	}
	return bin;
}

string bin2hex(string s)
{
	// binary to hexadecimal conversion
	unordered_map<string, string> mp;
	mp["0000"] = "0";
	mp["0001"] = "1";
	mp["0010"] = "2";
	mp["0011"] = "3";
	mp["0100"] = "4";
	mp["0101"] = "5";
	mp["0110"] = "6";
	mp["0111"] = "7";
	mp["1000"] = "8";
	mp["1001"] = "9";
	mp["1010"] = "A";
	mp["1011"] = "B";
	mp["1100"] = "C";
	mp["1101"] = "D";
	mp["1110"] = "E";
	mp["1111"] = "F";
	string hex = "";
	for (int i = 0; i < s.length(); i += 4) {
		string ch = "";
		ch += s[i];
		ch += s[i + 1];
		ch += s[i + 2];
		ch += s[i + 3];
		hex += mp[ch];
	}
	return hex;
}

char xor_hex(char hex1, char hex2){
  char xor_char[16][16] = {
    {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'},
    {'1','0','3','2','5','4','7','6','9','8','B','A','D','C','F','E'},
    {'2','3','0','1','6','7','4','5','A','B','8','9','E','F','C','D'},
    {'3','2','1','0','7','6','5','4','B','A','9','8','F','E','D','C'},
    {'4','5','6','7','0','1','2','3','C','D','E','F','8','9','A','B'},
    {'5','4','7','6','1','0','3','2','D','C','F','E','9','8','B','A'},
    {'6','7','4','5','2','3','0','1','E','F','C','D','A','B','8','9'},
    {'7','6','5','4','3','2','1','0','F','E','D','C','B','A','9','8'},
    {'8','9','A','B','C','D','E','F','0','1','2','3','4','5','6','7'},
    {'9','8','B','A','D','C','F','E','1','0','3','2','5','4','7','6'},
    {'A','B','8','9','E','F','C','D','2','3','0','1','6','7','4','5'},
    {'B','A','9','8','F','E','D','C','3','2','1','0','7','6','5','4'},
    {'C','D','E','F','8','9','A','B','4','5','6','7','0','1','2','3'},
    {'D','C','F','E','9','8','B','A','5','4','7','6','1','0','3','2'},
    {'E','F','C','D','A','B','8','9','6','7','4','5','2','3','0','1'},
    {'F','E','D','C','B','A','9','8','7','6','5','4','3','2','1','0'}
  };

  return xor_char[hex2dec(hex1)][hex2dec(hex2)];
}
string permute(string k, int* arr, int n)
{
    string permuted = "";
    for (int i = 0; i < n; i++) {
        permuted += k[arr[i]];
    }
    return permuted;
}

string S_box[16][16] = {
  {"63","7C","77","7B","F2","6B","6F","C5","30","01","67","2B","FE","D7","AB","76"},
  {"CA","82","C9","7D","FA","59","47","F0","AD","D4","A2","AF","9C","A4","72","C0"},
  {"B7","FD","93","26","36","3F","F7","CC","34","A5","E5","F1","71","D8","31","15"},
  {"04","C7","23","C3","18","96","05","9A","07","12","80","E2","EB","27","B2","75"},
  {"09","83","2C","1A","1B","6E","5A","A0","52","3B","D6","B3","29","E3","2F","84"},
  {"53","D1","00","ED","20","FC","B1","5B","6A","CB","BE","39","4A","4C","58","CF"},
  {"D0","EF","AA","FB","43","4D","33","85","45","F9","02","7F","50","3C","9F","A8"},
  {"51","A3","40","8F","92","9D","38","F5","BC","B6","DA","21","10","FF","F3","D2"},
  {"CD","0C","13","EC","5F","97","44","17","C4","A7","7E","3D","64","5D","19","73"},
  {"60","81","4F","DC","22","2A","90","88","46","EE","B8","14","DE","5E","0B","DB"},
  {"E0","32","3A","0A","49","06","24","5C","C2","D3","AC","62","91","95","E4","79"},
  {"E7","C8","37","6D","8D","D5","4E","A9","6C","56","F4","EA","65","7A","AE","08"},
  {"BA","78","25","2E","1C","A6","B4","C6","E8","DD","74","1F","4B","BD","8B","8A"},
  {"70","3E","B5","66","48","03","F6","0E","61","35","57","B9","86","C1","1D","9E"},
  {"E1","F8","98","11","69","D9","8E","94","9B","1E","87","E9","CE","55","28","DF"},
  {"8C","A1","89","0D","BF","E6","42","68","41","99","2D","0F","B0","54","BB","16"}
};

//ChAr xor()
